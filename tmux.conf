# ╔══════════════════════════════════════════════════════════════════════════╗
# ║                     Daniel's Enhanced Tmux Configuration                     ║
# ║              Optimized for Neovim, Claude CLI, and Development               ║
# ╚══════════════════════════════════════════════════════════════════════════╝

# ================================================================================
# KEY BINDINGS QUICK REFERENCE
# ================================================================================
# Prefix: Ctrl+a (changed from default Ctrl+b)
#
# SESSION MANAGEMENT:
#   Prefix + S        → List and switch sessions
#   Prefix + N        → Create new session
#   Prefix + $        → Rename current session
#   Prefix + d        → Detach from session
#   Prefix + D        → Choose session to detach
#
# WINDOW MANAGEMENT:
#   Prefix + c        → Create new window (in current path)
#   Prefix + ,        → Rename current window
#   Prefix + w        → List windows
#   Prefix + &        → Kill current window
#   Prefix + 0-9      → Switch to window by number
#   Ctrl+Shift+Left   → Previous window (no prefix needed)
#   Ctrl+Shift+Right  → Next window (no prefix needed)
#   Prefix + Tab      → Last active window
#
# PANE MANAGEMENT:
#   Prefix + |        → Split horizontally (in current path)
#   Prefix + -        → Split vertically (in current path)
#   Prefix + x        → Kill current pane
#   Prefix + z        → Toggle pane zoom
#   Prefix + Space    → Toggle between layouts
#   Prefix + !        → Break pane into window
#   Prefix + q        → Show pane numbers
#   Prefix + o        → Go to next pane
#   Prefix + {        → Move pane left
#   Prefix + }        → Move pane right
#
# PANE NAVIGATION:
#   Prefix + h/j/k/l  → Navigate panes (vim-style)
#   Alt + Arrow Keys  → Navigate panes (no prefix needed)
#   Prefix + ;        → Go to last active pane
#
# PANE RESIZING:
#   Prefix + H/J/K/L  → Resize panes (5 units, repeatable)
#   Prefix + </>      → Resize horizontally (1 unit, repeatable)
#
# COPY MODE:
#   Prefix + [        → Enter copy mode
#   Prefix + ]        → Paste from buffer
#   Prefix + =        → Choose buffer to paste
#   In copy mode:
#     v              → Start selection
#     y              → Copy selection
#     Space          → Start selection (alternative)
#     Enter          → Copy selection (alternative)
#     q              → Exit copy mode
#     /              → Search forward
#     ?              → Search backward
#
# SPECIAL FEATURES:
#   Prefix + r        → Reload tmux configuration
#   Prefix + P        → Toggle pane synchronization (type in all panes)
#   Prefix + m        → Toggle mouse mode
#   Prefix + b        → Toggle status bar
#   Prefix + t        → Show time
#   F12              → Toggle all key bindings (for nested tmux)
#
# CLAUDE CLI WORKFLOW:
#   Prefix + C        → Create 3-pane layout (editor|terminal|claude)
#   Prefix + E        → Even horizontal split (2 panes)
#   Prefix + V        → Even vertical split (2 panes)
# ================================================================================

# ================================================================================
# GENERAL SETTINGS
# ================================================================================

# Enable mouse support (scrolling, pane selection, resizing)
set -g mouse on

# Set default terminal with 256 colors
set -g default-terminal "screen-256color"

# Enable true color (24-bit) support
set -ga terminal-overrides ",xterm-256color:Tc"
set -ga terminal-overrides ",alacritty:Tc"

# Increase scrollback buffer size (10k lines)
set -g history-limit 10000

# Start windows and panes at 1 instead of 0 (more natural for keyboard)
set -g base-index 1
setw -g pane-base-index 1

# Renumber windows sequentially after closing any of them
set -g renumber-windows on

# Don't rename windows automatically (preserve custom names)
set-option -g allow-rename off

# Set window titles
set -g set-titles on
set -g set-titles-string '#S:#I:#W - "#T"'

# Reduce escape time for better vim/neovim experience (0ms)
set -sg escape-time 0

# Increase repeat time for repeatable commands (600ms)
set -g repeat-time 600

# Focus events enabled for terminals that support them
set -g focus-events on

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*
setw -g aggressive-resize on

# ================================================================================
# KEY BINDINGS - PREFIX AND GENERAL
# ================================================================================

# Change prefix from 'C-b' to 'C-a' (easier to reach)
unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix

# Double tap prefix to send it to nested tmux
bind-key a send-prefix

# Reload configuration file with notification
bind r source-file ~/.tmux.conf \; display-message "󰑓 Config reloaded!"

# ================================================================================
# KEY BINDINGS - PANES
# ================================================================================

# Split panes using | and - (more intuitive)
# New panes open in current directory
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
unbind '"'
unbind %

# Quick pane splitting with automatic layout
bind E split-window -h -c "#{pane_current_path}" \; select-layout even-horizontal
bind V split-window -v -c "#{pane_current_path}" \; select-layout even-vertical

# Navigate panes without prefix using Alt+Arrow
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D

# Navigate panes with vim keys (with prefix)
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Smart pane switching with awareness of vim splits
# (Requires vim-tmux-navigator plugin in vim/neovim)
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h' 'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j' 'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k' 'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l' 'select-pane -R'

# Resize panes with vim keys (repeatable with -r flag)
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# Fine-grained resizing
bind -r < resize-pane -L 1
bind -r > resize-pane -R 1

# Toggle pane synchronization (type in all panes simultaneously)
bind P setw synchronize-panes \; display-message "Pane sync: #{?pane_synchronized,ON,OFF}"

# Swap panes
bind > swap-pane -D
bind < swap-pane -U

# ================================================================================
# KEY BINDINGS - WINDOWS
# ================================================================================

# Create new window in current path
bind c new-window -c "#{pane_current_path}"

# Quick window switching without prefix
bind-key -n C-S-Left previous-window
bind-key -n C-S-Right next-window

# Alternative window navigation
bind -r C-h previous-window
bind -r C-l next-window

# Jump to last active window
bind Tab last-window

# Move windows left/right
bind-key -r S-Left swap-window -t -1\; select-window -t -1
bind-key -r S-Right swap-window -t +1\; select-window -t +1

# ================================================================================
# KEY BINDINGS - SESSIONS
# ================================================================================

# Session navigation
bind-key S choose-session
bind-key N new-session
bind-key D choose-session -F "#{?session_attached,Attached,}" \; send-keys C-m \; detach

# ================================================================================
# COPY MODE SETTINGS
# ================================================================================

# Use vim keybindings in copy mode
setw -g mode-keys vi

# Enter copy mode with Prefix + [
bind [ copy-mode

# Setup 'v' to begin selection as in Vim
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi V send-keys -X select-line
bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle

# Copy with 'y' and also copy to system clipboard
# Linux (requires xclip or xsel)
if-shell "which xclip" \
  "bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -selection clipboard'"

if-shell "which xsel" \
  "bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xsel -b'"

# macOS (requires pbcopy)
if-shell "which pbcopy" \
  "bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'pbcopy'"

# Update default binding of `Enter` to also use copy-pipe
unbind -T copy-mode-vi Enter
if-shell "which xclip" \
  "bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel 'xclip -selection clipboard'"

# Mouse support in copy mode
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -selection clipboard"

# ================================================================================
# THEME AND STATUS BAR
# ================================================================================

# Status bar update interval
set -g status-interval 5

# Status bar position
set-option -g status-position bottom

# Status bar colors (Monokai-inspired)
set -g status-style bg=colour235,fg=colour136

# Status bar - left side
set -g status-left-length 50
set -g status-left "#[fg=colour232,bg=colour166,bold]  #S #[fg=colour166,bg=colour236,nobold]#[fg=colour244,bg=colour236] #I:#P #[fg=colour236,bg=colour235]"

# Status bar - right side
set -g status-right-length 50
set -g status-right "#[fg=colour236,bg=colour235]#[fg=colour244,bg=colour236] %H:%M #[fg=colour166,bg=colour236]#[fg=colour232,bg=colour166,bold] %d-%b-%y "

# Window status format
setw -g window-status-format "#[fg=colour244,bg=colour235] #I:#W#F "
setw -g window-status-current-format "#[fg=colour235,bg=colour166]#[fg=colour232,bg=colour166,bold] #I:#W#F #[fg=colour166,bg=colour235,nobold]"

# Window status separator
setw -g window-status-separator ""

# Pane borders
set -g pane-border-style fg=colour238,bg=colour235
set -g pane-active-border-style fg=colour166,bg=colour235

# Pane number display
set -g display-panes-active-colour colour166
set -g display-panes-colour colour244

# Message style
set -g message-style bg=colour166,fg=colour232,bold

# Command line style
set -g message-command-style bg=colour236,fg=colour166

# ================================================================================
# ACTIVITY AND NOTIFICATIONS
# ================================================================================

# Monitor activity in other windows
setw -g monitor-activity on
set -g visual-activity off

# Monitor silence (useful for long-running commands)
# setw -g monitor-silence 30

# Bell settings
set -g bell-action none
set -g visual-bell off

# ================================================================================
# SPECIAL FEATURES
# ================================================================================

# Toggle mouse mode
bind m set -g mouse \; display-message "Mouse: #{?mouse,ON,OFF}"

# Toggle status bar
bind b set -g status \; display-message "Status bar: #{?status,ON,OFF}"

# Clear both screen and history
bind -n C-l send-keys C-l \; run 'sleep 0.1' \; clear-history

# Create a 3-pane development layout (perfect for Claude CLI workflow)
bind C split-window -h -c "#{pane_current_path}" -p 40 \; \
       split-window -v -c "#{pane_current_path}" -p 30 \; \
       select-pane -t 1 \; \
       display-message "Dev layout created: Editor | Terminal | Claude"

# Toggle key bindings on/off (useful for nested tmux sessions)
bind -T root F12 \
  set prefix None \;\
  set key-table off \;\
  set status-style "bg=colour238,fg=colour244" \;\
  if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
  refresh-client -S \;\

bind -T off F12 \
  set -u prefix \;\
  set -u key-table \;\
  set -u status-style \;\
  refresh-client -S

# ================================================================================
# PLATFORM-SPECIFIC SETTINGS
# ================================================================================

# macOS specific settings
if-shell "uname | grep -q Darwin" \
  "set -g default-command 'reattach-to-user-namespace -l $SHELL'"

# Linux specific clipboard integration
if-shell "uname | grep -q Linux" \
  "bind ] run 'xclip -o -selection clipboard | tmux load-buffer - ; tmux paste-buffer'"

# ================================================================================
# PLUGIN CONFIGURATION (Optional - requires TPM)
# ================================================================================
# To use plugins, uncomment the following lines and install TPM:
# git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

# Plugin list
# set -g @plugin 'tmux-plugins/tpm'
# set -g @plugin 'tmux-plugins/tmux-sensible'
# set -g @plugin 'tmux-plugins/tmux-resurrect'      # Persist sessions
# set -g @plugin 'tmux-plugins/tmux-continuum'      # Auto-save/restore
# set -g @plugin 'tmux-plugins/tmux-yank'           # Better copy mode
# set -g @plugin 'tmux-plugins/tmux-open'           # Open files/URLs
# set -g @plugin 'christoomey/vim-tmux-navigator'   # Seamless vim navigation

# Plugin settings
# set -g @resurrect-capture-pane-contents 'on'
# set -g @continuum-restore 'on'
# set -g @continuum-boot 'on'

# Initialize TMUX plugin manager (keep at the very bottom)
# run '~/.tmux/plugins/tpm/tpm'

# ================================================================================
# NOTES AND TIPS
# ================================================================================
# 1. To use this configuration, save it as ~/.tmux.conf
# 2. Reload with: tmux source-file ~/.tmux.conf (or Prefix + r)
# 3. For clipboard to work on Linux, install xclip: sudo apt-get install xclip
# 4. For clipboard to work on macOS, pbcopy/pbpaste are built-in
# 5. The smart pane switching requires vim-tmux-navigator in Neovim
# 6. Use 'tmux new -s name' to create named sessions
# 7. Use 'tmux attach -t name' to attach to existing sessions
# 8. The F12 key binding is useful when working with nested tmux sessions